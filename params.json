{"name":"CocoQuery","tagline":"CocoQuery","body":"CocoQuery\r\n=========\r\n\r\nAn Android library inspire by AndroidQuery, bring chain style UI programming APi to UI development, aim to simplify android UI development.\r\n\r\nMotivation\r\n=========\r\nI love the way develop android UI logic with AndroidQuery. Compare those code snippet\r\n\r\n``` java\r\n\r\n        ImageView tbView = (ImageView) view.findViewById(R.id.icon);\r\n        if(tbView != null){\r\n\r\n                tbView.setImageBitmap(R.drawable.icon);\r\n                tbView.setVisibility(View.VISIBLE);\r\n\r\n                tbView.setOnClickListener(this);\r\n\r\n        }\r\n\r\n        TextView nameView = (TextView) view.findViewById(R.id.name);\r\n        if(nameView != null){\r\n                nameView.setText(content.getPname());\r\n        }\r\n\r\n        TextView timeView = (TextView) view.findViewById(R.id.time);\r\n\r\n        if(timeView != null){\r\n                long now = System.currentTimeMillis();\r\n                timeView.setText(FormatUtility.relativeTime(now, content.getCreate()));\r\n                timeView.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        TextView descView = (TextView) view.findViewById(R.id.desc);\r\n\r\n        if(descView != null){\r\n                descView.setText(content.getDesc());\r\n                descView.setVisibility(View.VISIBLE);\r\n        }\r\n ```\r\n\r\n After\r\n\r\n ``` java\r\n         aq.id(R.id.icon).image(R.drawable.icon).visible().clicked(this);\r\n         aq.id(R.id.name).text(content.getPname());\r\n         aq.id(R.id.time).text(FormatUtility.relativeTime(System.currentTimeMillis(), content.getCreate())).visible();\r\n         aq.id(R.id.desc).text(content.getDesc()).visible();\r\n ```\r\n\r\n No nullpoint checking, no boring setter, short code is beautiful, isn't it?\r\n\r\n\r\n Why another wheel?\r\n=========\r\n\r\n AndroidQuery was created quite many years ago, try to cover most part of android development including ui,http request,rest and so on, which was good.\r\n \r\n It's might a good open-box solution, but not good enough in all particular area, like url imageview, httprequest. I prefer using Picosso like library to provide better performance, for example.\r\n \r\nbutterknife bring DI to practical level, I believe it would be mainstream programming style,and it would need a better partner.\r\n\r\n Despite of those, AndroidQuery has not update for quite long time.\r\n\r\n So, I decided to create a library concentrate to simplify UI layer programming, and can be integrated well with other libraries.\r\n\r\n\r\n Usage\r\n========\r\n\r\n```xml\r\n compile 'com.cocosw:query:0.1'\r\n```\r\nor just grab the jar file into your libs folder\r\n\r\nInstant CocoQuery in your Activity or Fragment\r\n\r\n``` java\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        q = new CocoQuery(this);\r\n```\r\nor in Fragment\r\n``` java\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View v = inflater.inflate(layoutId(), null);\r\n        CocoQuery q = new CocoQuery(getActivity(),v);\r\n```\r\n\r\nplease *NEVER* keep CocoQuery instance into static field.\r\n\r\n CocoQuery is NOT a\r\n=========\r\n\r\n#####Async http request library\r\n There are already tons of libraries doing this, you can feel free to choose the one you like, for example https://github.com/kevinsawicki/http-request, chain style programming.\r\n \r\n#####Image downloading library\r\n I understand this is important for you, still, other libraries, like Picasso mentioned before can do this quite well.\r\n \r\n Dependency & Compatibility\r\n=========\r\n - *NO* any other dependency.\r\n - Most of api compatible with AndroidQuery, and ajax related api been removed.\r\n - Android Api 8+\r\n \r\nExtension\r\n=========\r\n You can extend the class to adapt your custom view or 3rd party libraries.\r\n\r\n#####Extend AbstractViewQuery\r\n\r\n``` java\r\npublic class YourQuery extends AbstractViewQuery<DefaultQuery> {\r\n\r\n   // constructor.....\r\n\r\n    /**\r\n     * Your own method to chain\r\n     *\r\n     * @param resid the resid\r\n     * @return self\r\n     */\r\n    public T image(String url) {\r\n        if (view instanceof ImageView) {\r\n            Picasso.with(context).load(url).into((ImageView)view);\r\n        }\r\n        return self();\r\n    }\r\n ```\r\n\r\n#####Build CocoQuery\r\nYou only need to do this only one time, so onCreate in Application would be a ideal place\r\n\r\n``` java\r\nCocoQuery.setQueryClass(YourQuery.class);\r\n```\r\n\r\n#####And\r\n``` java\r\nCocoQuery<YourQuery> q = new CocoQuery(activity);\r\n```\r\n\r\nYou can also extend CocoQuery for other functions you need.\r\n\r\n\r\nLicense\r\n==========\r\nApache License, Version 2.0\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}